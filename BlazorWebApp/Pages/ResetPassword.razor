@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@using web_api_base.Models.ViewModel

<PageTitle>Reset Password - Grocery Shop</PageTitle>

<link href="css/auth.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

@code {
    [Parameter, SupplyParameterFromQuery] public string? Token { get; set; }
    private ResetPasswordVM model = new();
    private string message = "";
    private string messageType = "";
    private bool isSubmitting = false;
    private bool showNewPassword = false;
    private bool showConfirmPassword = false;

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Token))
        {
            message = "Invalid reset token.";
            messageType = "error";
        }
        else
        {
            model.Token = Token; // Set the token in the model
        }
    }

    private void ToggleNewPasswordVisibility()
    {
        showNewPassword = !showNewPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleResetPassword()
    {
        isSubmitting = true;
        
        try
        {
            // Validate token and update password in database
            // This is where you'd implement your password reset logic
            var isReset = await LoginService.ResetPassword(model);

            if (!isReset)
            {
                message = "Failed to reset password. Please try again.";
                messageType = "error";
                return;
            }
            // If successful, clear the model and show success message
            message = "Password has been reset successfully. You can now login with your new password.";
            messageType = "success";
            model = new();
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception)
        {
            message = "An error occurred while resetting your password.";
            messageType = "error";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}

<div class="auth-container">
    <div class="auth-box">
        <div class="auth-header">
            <h2>Reset Your Password</h2>
            <p>Enter your new password below</p>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(messageType == "success" ? "alert-success" : "alert-error")">
                @message
            </div>
        }

        @if (string.IsNullOrEmpty(Token))
        {
            <div class="auth-footer">
                <p><a href="/forget-password">Request a new reset link</a></p>
            </div>
        }
        else
        {
            <EditForm Model="model" OnValidSubmit="HandleResetPassword">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="password">New Password</label>
                    <div class="input-group">
                        <i class="fas fa-lock"></i>
                        <InputText type="@(showNewPassword ? "text" : "password")" id="password" placeholder="Enter new password" 
                                   @bind-Value="model.NewPassword" disabled="@isSubmitting" />
                        <button type="button" class="password-toggle" @onclick="ToggleNewPasswordVisibility">
                            <i class="@(showNewPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="() => model.NewPassword" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <div class="input-group">
                        <i class="fas fa-lock"></i>
                        <InputText type="@(showConfirmPassword ? "text" : "password")" id="confirmPassword" placeholder="Confirm new password" 
                                   @bind-Value="model.ConfirmPassword" disabled="@isSubmitting" />
                        <button type="button" class="password-toggle" @onclick="ToggleConfirmPasswordVisibility">
                            <i class="@(showConfirmPassword ? "fas fa-eye-slash" : "fas fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="() => model.ConfirmPassword" />
                </div>

                <div class="form-submit">
                    <button type="submit" class="btn-submit" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </div>
            </EditForm>
        }

        <div class="auth-footer">
            <p><a href="/login">Back to Login</a></p>
        </div>
    </div>
</div>