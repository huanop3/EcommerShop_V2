@page "/shipper/dashboard"
@using BlazorWebApp.ViewModel
@using BlazorWebApp.Services
@using BlazorWebApp
@using MainEcommerceService.Models.ViewModel
@using MudBlazor
@using BlazorWebApp.Pages.Components.Shipper
@layout _AdminLayout
@inject ShipmentService ShipmentService
@inject ShipperProfileService ShipperProfileService
@inject SignalRService SignalRService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@attribute [Authorize(Roles = "Shipper")]

<PageTitle>Dashboard - Shipper</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header with Connection Status -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <div class="d-flex justify-space-between align-center">
            <div>
                <MudText Typo="Typo.h4" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-3" />
                    Shipper Dashboard
                    @if (currentShipperProfile != null)
                    {
                        <MudChip T="int" Size="Size.Small" Color="Color.Primary" Class="ml-2">
                            ID: @currentShipperProfile.ShipperId
                        </MudChip>
                    }
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                    Qu·∫£n l√Ω ƒë∆°n h√†ng v√† giao h√†ng
                    @if (currentShipperProfile != null)
                    {
                        <span> - @currentShipperProfile.FullName</span>
                    }
                </MudText>
            </div>
            <div class="text-right">
                <MudChip T="string" 
                        Size="Size.Small" 
                        Color="@(isConnected ? Color.Success : Color.Error)"
                        Icon="@(isConnected ? Icons.Material.Filled.Wifi : Icons.Material.Filled.WifiOff)">
                    @(isConnected ? "Connected" : "Disconnected")
                </MudChip>
                @if (lastRefreshTime.HasValue)
                {
                    <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                        C·∫≠p nh·∫≠t: @lastRefreshTime.Value.ToString("HH:mm:ss")
                    </MudText>
                }
            </div>
        </div>
    </MudPaper>

    <!-- Summary Cards -->
    @if (summary != null)
    {
        <MudGrid Class="mb-6">
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
                    <MudText Typo="Typo.h6">@summary.TotalAssignedOrders</MudText>
                    <MudText Typo="Typo.caption">T·ªïng ƒë∆°n h√†ng</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Size="Size.Large" Color="Color.Info" Class="mb-2" />
                    <MudText Typo="Typo.h6">@summary.OrdersInProgress</MudText>
                    <MudText Typo="Typo.caption">ƒêang giao</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" Class="mb-2" />
                    <MudText Typo="Typo.h6">@summary.OrdersCompleted</MudText>
                    <MudText Typo="Typo.caption">Ho√†n th√†nh</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="2" Class="pa-4 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Color="Color.Warning" Class="mb-2" />
                    <MudText Typo="Typo.h6">@summary.FormattedTotalEarnings</MudText>
                    <MudText Typo="Typo.caption">Hoa h·ªìng</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
    else if (isLoadingData)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" Class="mb-4" />
    }

    <!-- ‚úÖ ORDER CONFIRMATION SECTION -->
    @if (currentShipperProfile != null)
    {
        <OrderConfirmationComponent @ref="orderConfirmationRef"
                                  ShipperId="currentShipperProfile.ShipperId"
                                  isConnected="isConnected"
                                  OnOrderConfirmed="HandleOrderConfirmed" />
    }

    <!-- ‚úÖ MY ASSIGNED ORDERS WITH DETAILS -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <!-- ‚úÖ S·ª¨A TITLE -->
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-2" />
                ƒê∆°n h√†ng c·ªßa b·∫°n (@myAssignedOrders.Count)
                @if (isLoadingData)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ml-2" />
                }
            </MudText>
            
            <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                <MudButton StartIcon="@Icons.Material.Filled.Refresh"
                          OnClick="LoadAssignedOrders"
                          Disabled="isLoadingData">
                    Refresh
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.FilterList"
                          OnClick="ToggleFilter">
                    Filter
                </MudButton>
            </MudButtonGroup>
        </div>
        
        @if (myAssignedOrders.Any())
        {
            <!-- ‚úÖ HI·ªÇN TH·ªä TH·ªêNG K√ä NHANH -->
            <MudAlert Severity="Severity.Info" Dense="true" Class="mb-3">
                <div class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-2" />
                    <MudText Typo="Typo.body2">
                        <strong>T·ªïng c·ªông:</strong> @myAssignedOrders.Count ƒë∆°n h√†ng
                    </MudText>
                </div>
            </MudAlert>
            
            <!-- ‚úÖ ORDERS TABLE -->
            <AssignedOrdersComponent Orders="myAssignedOrders" OnOrderSelected="LoadOrderDashboard" />
            
            <!-- ‚úÖ ORDER DETAILS BELOW TABLE -->
            @if (currentDashboard != null)
            {
                <MudDivider Class="my-4" />
                
                <MudAlert Severity="Severity.Success" Dense="true" Class="mb-3">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Visibility" Size="Size.Small" Class="mr-2" />
                        <MudText Typo="Typo.body2">
                            <strong>Chi ti·∫øt ƒë∆°n h√†ng @currentDashboard.OrderInfo.OrderId</strong>
                            @if (currentDashboard.ShipmentInfo != null)
                            {
                                <span> | Tracking: <strong>@currentDashboard.ShipmentInfo.TrackingNumber</strong></span>
                            }
                        </MudText>
                    </div>
                </MudAlert>

                <MudTabs Elevation="1" Rounded="true" ApplyEffectsToContainer="true" Class="mb-4">
                    <MudTabPanel Text="Th√¥ng tin ƒë∆°n h√†ng" Icon="@Icons.Material.Filled.Info">
                        <OrderDetailsComponent Dashboard="currentDashboard" OnStatusUpdated="HandleStatusUpdated" />
                    </MudTabPanel>
                    <MudTabPanel Text="Th√¥ng tin kh√°ch h√†ng" Icon="@Icons.Material.Filled.Person">
                        <CustomerInfoComponent Dashboard="currentDashboard" />
                    </MudTabPanel>
                    <MudTabPanel Text="S·∫£n ph·∫©m" Icon="@Icons.Material.Filled.Inventory">
                        <OrderItemsComponent Dashboard="currentDashboard" />
                    </MudTabPanel>
                </MudTabs>
            }
        }
        else if (isLoadingData)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
        }
        else
        {
            <!-- ‚úÖ S·ª¨A MESSAGE KHI CH∆ØA C√ì ƒê∆†N H√ÄNG -->
            <MudAlert Severity="Severity.Info">
                <MudText Typo="Typo.h6">üì¶ B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o</MudText>
                <MudText>S·ª≠ d·ª•ng form "Nh·∫≠n ƒë∆°n h√†ng m·ªõi" ·ªü tr√™n ƒë·ªÉ nh·∫≠n ƒë∆°n h√†ng t·ª´ admin ho·∫∑c ch·ªù admin assign ƒë∆°n h√†ng cho b·∫°n.</MudText>
            </MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    // ‚úÖ COMPONENT REFERENCES
    private OrderConfirmationComponent? orderConfirmationRef;
    
    // ‚úÖ DATA PROPERTIES
    private bool isLoadingData = false;
    private bool isConnected = false;
    private int currentUserId;
    private ShipperProfileVM? currentShipperProfile;
    private ShipmentDashboardVM? currentDashboard;
    private List<AssignedOrderVM> allAssignedOrders = new(); // ‚úÖ T·∫§T C·∫¢ ƒê∆†N H√ÄNG T·ª™ API
    private List<AssignedOrderVM> myAssignedOrders = new(); // ‚úÖ CH·ªà ƒê∆†N H√ÄNG C·ª¶A SHIPPER N√ÄY
    private ShipperDashboardSummaryVM? summary;
    private DateTime? lastRefreshTime;
    private int signalREventCount = 0;

    // ‚úÖ LIFECYCLE METHODS
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadUserProfile();
            await InitializeSignalR();
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error initializing dashboard: {ex.Message}");
            Snackbar.Add($"L·ªói kh·ªüi t·∫°o dashboard: {ex.Message}", Severity.Error);
        }
    }

    // ‚úÖ USER PROFILE LOADING
    private async Task LoadUserProfile()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userIdClaim = authState.User.FindFirst("sub")?.Value ?? authState.User.FindFirst("UserId")?.Value;
            
            if (int.TryParse(userIdClaim, out currentUserId))
            {
                currentShipperProfile = await ShipperProfileService.GetShipperProfileByUserIdAsync(currentUserId);
                Console.WriteLine($"‚úÖ Loaded shipper profile: ID {currentShipperProfile?.ShipperId}, User {currentUserId}");
            }
            else
            {
                Console.WriteLine("‚ùå Cannot parse user ID from claims");
                Snackbar.Add("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh th√¥ng tin user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error loading user profile: {ex.Message}");
            Snackbar.Add($"L·ªói t·∫£i th√¥ng tin user: {ex.Message}", Severity.Error);
        }
    }

    // ‚úÖ SIGNALR INITIALIZATION
    private async Task InitializeSignalR()
    {
        try
        {
            Console.WriteLine("üîÑ Starting SignalR connection...");
            
            await SignalRService.StartConnectionAsync();
            isConnected = SignalRService.IsMainHubConnected;
            
            Console.WriteLine($"‚úÖ SignalR connected: {isConnected}");
            
            if (currentShipperProfile != null && isConnected)
            {
                await SignalRService.RegisterShipperConnectionAsync(currentShipperProfile.ShipperId, currentUserId);
                Console.WriteLine($"‚úÖ Registered to Shipper_{currentShipperProfile.ShipperId} group");
            }
            
            SignalRService.ShipmentStatusUpdated += HandleShipmentStatusUpdated;
            SignalRService.YourOrderAssignedToShipper += HandleOrderAssigned;
            SignalRService.OrderStatusChanged += HandleYourOrderStatusChanged;

            StateHasChanged();
            Snackbar.Add($"SignalR: {(isConnected ? "‚úÖ" : "‚ùå")}", isConnected ? Severity.Success : Severity.Error);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå SignalR Error: {ex.Message}");
            Snackbar.Add($"L·ªói SignalR: {ex.Message}", Severity.Warning);
        }
    }

    // ‚úÖ SIGNALR EVENT HANDLERS
    private async void HandleShipmentStatusUpdated(int shipmentId, int orderId, string status)
    {
        await InvokeAsync(async () =>
        {
            signalREventCount++;
            Snackbar.Add($"üì¶ Shipment #{shipmentId}: {status}", Severity.Info);
            
            if (orderConfirmationRef != null)
            {
                await orderConfirmationRef.OnShipmentStatusUpdated(shipmentId, orderId, status);
            }
            
            if (currentDashboard?.OrderInfo.OrderId == orderId)
            {
                await LoadOrderDashboard(orderId);
            }
            
            await LoadAssignedOrders();
            lastRefreshTime = DateTime.Now;
            StateHasChanged();
        });
    }

    private async void HandleOrderAssigned(int orderId)
    {
        await InvokeAsync(async () =>
        {
            signalREventCount++;
            Snackbar.Add($"üéØ ƒê∆°n h√†ng m·ªõi #{orderId}", Severity.Success);
            
            await LoadData();
            lastRefreshTime = DateTime.Now;
            StateHasChanged();
        });
    }

    private async void HandleYourOrderStatusChanged(int orderId, int userId, int statusId, string statusName)
    {
        await InvokeAsync(async () =>
        {
            signalREventCount++;
            Snackbar?.Add($"üîî Order #{orderId}: {statusName}", Severity.Info);
            
            if (orderConfirmationRef != null)
            {
                await orderConfirmationRef.OnYourOrderStatusChanged(orderId, userId, statusId, statusName);
            }
            
            await LoadData();
            lastRefreshTime = DateTime.Now;
            StateHasChanged();
        });
    }

    // ‚úÖ DATA LOADING METHODS
    private async Task LoadData()
    {
        isLoadingData = true;
        try
        {
            await LoadAssignedOrders();
            await LoadSummary();
            lastRefreshTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error loading data: {ex.Message}");
            Snackbar.Add($"L·ªói t·∫£i d·ªØ li·ªáu: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingData = false;
        }
    }

    // ‚úÖ LOAD ASSIGNED ORDERS - FILTER BY CURRENT SHIPPER
    // ‚úÖ ƒê∆†N GI·∫¢N NH·∫§T - TIN T∆Ø·ªûNG API GetMyAssignedOrdersAsync()
private async Task LoadAssignedOrders()
{
    try
    {
        Console.WriteLine($"üîç Loading my assigned orders...");
        
        // ‚úÖ API GetMyAssignedOrdersAsync() ƒë√£ filter theo JWT token r·ªìi
        // Kh√¥ng c·∫ßn filter th√™m g√¨ n·ªØa
        myAssignedOrders = await ShipmentService.GetMyAssignedOrdersAsync(currentShipperProfile.ShipperId);

        Console.WriteLine($"‚úÖ Loaded {myAssignedOrders.Count} assigned orders from API");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"‚ùå Error loading assigned orders: {ex.Message}");
        myAssignedOrders = new List<AssignedOrderVM>();
        throw;
    }
}

    private async Task LoadSummary()
    {
        try
        {
            if (currentShipperProfile != null)
            {
                summary = await ShipmentService.GetShipperDashboardSummaryAsync(currentShipperProfile.ShipperId);
                Console.WriteLine($"‚úÖ Loaded summary for shipper {currentShipperProfile.ShipperId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error loading summary: {ex.Message}");
        }
    }

    // ‚úÖ LOAD ORDER DASHBOARD - CH·ªà N·∫æU THU·ªòC V·ªÄ SHIPPER
    private async Task LoadOrderDashboard(int orderId)
    {
        try
        {
            if (currentShipperProfile == null)
            {
                Snackbar.Add("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th√¥ng tin shipper", Severity.Error);
                return;
            }

            Console.WriteLine($"üîç Loading dashboard for order {orderId}");
            
            var dashboard = await ShipmentService.GetShipmentDashboardByOrderIdAsync(orderId);
            
            if (dashboard == null)
            {
                Console.WriteLine($"‚ùå Dashboard not found for order {orderId}");
                currentDashboard = null;
                return;
            }

            // ‚úÖ KI·ªÇM TRA QUY·ªÄN TRUY C·∫¨P
            if (dashboard.ShipmentInfo?.ShipperId != currentShipperProfile.ShipperId)
            {
                Console.WriteLine($"‚ùå Order {orderId} kh√¥ng thu·ªôc v·ªÅ shipper {currentShipperProfile.ShipperId}");
                Snackbar.Add("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y", Severity.Warning);
                currentDashboard = null;
                return;
            }
            
            currentDashboard = dashboard;
            Console.WriteLine($"‚úÖ Loaded dashboard for order {orderId}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error loading order dashboard: {ex.Message}");
            currentDashboard = null;
        }
    }

    // ‚úÖ EVENT HANDLERS
    private async Task HandleOrderConfirmed(ShipmentDashboardVM dashboard)
    {
        Console.WriteLine($"‚úÖ Order confirmed: {dashboard.OrderInfo.OrderId}");
        await LoadData();
        currentDashboard = dashboard;
        Snackbar.Add($"‚úÖ ƒê√£ nh·∫≠n ƒë∆°n h√†ng #{dashboard.OrderInfo.OrderId}!", Severity.Success);
    }

    private async Task HandleStatusUpdated()
    {
        Console.WriteLine("‚úÖ Status updated, refreshing...");
        await LoadData();
        if (currentDashboard != null)
        {
            await LoadOrderDashboard(currentDashboard.OrderInfo.OrderId);
        }
        Snackbar.Add("C·∫≠p nh·∫≠t th√†nh c√¥ng", Severity.Success);
    }

    // ‚úÖ UI ACTIONS
    private async Task RefreshData()
    {
        await LoadData();
        Snackbar.Add("ƒê√£ l√†m m·ªõi", Severity.Info);
    }

    private void ToggleFilter()
    {
        Snackbar.Add("Filter coming soon", Severity.Info);
    }

    // ‚úÖ DISPOSAL
    public void Dispose()
    {
        try
        {
            if (SignalRService != null)
            {
                SignalRService.ShipmentStatusUpdated -= HandleShipmentStatusUpdated;
                SignalRService.YourOrderAssignedToShipper -= HandleOrderAssigned;
                SignalRService.OrderStatusChanged -= HandleYourOrderStatusChanged;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing: {ex.Message}");
        }
    }
}