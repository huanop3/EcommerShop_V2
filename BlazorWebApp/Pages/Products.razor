@page "/products"
@page "/products/{CategorySlug}"
@using BlazorWebApp.Services
@using ProductService.Models.ViewModel
@using MainEcommerceService.Models.ViewModel
@inject SignalRService SignalRService
@inject ToastService ToastService
@inject ProdService ProdService
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>All Products - TechWorld</PageTitle>

<link href="css/products.css" rel="stylesheet" />

<div class="container">
    <div>
        <div class="row">
            <!-- Sidebar Filters -->
            <div class="col-lg-3 mb-4">
                <div class="sidebar-container">
                    <div class="category-header">
    <h2>
        @if (!string.IsNullOrEmpty(selectedCategoryName))
        {
            @selectedCategoryName
        }
        else
        {
            <text>All Products</text>
        }
    </h2>
    <div class="breadcrumb-nav">
        <a href="/" class="text-decoration-none">Home</a>
        <span class="separator">/</span>
        <a href="/products" class="text-decoration-none">Products</a>
        @if (!string.IsNullOrEmpty(selectedCategoryName))
        {
            <span class="separator">/</span>
            <span class="current">@selectedCategoryName</span>
        }
    </div>
</div>
                    <div class="filters-sidebar">
                        <!-- Categories Filter -->
                        <div class="filter-section">
                            <h4>Categories</h4>
                            <div class="filter-list">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="category" id="all-categories" 
                                           checked="@(selectedCategoryId == null)" 
                                           @onchange="() => FilterByCategory(null)">
                                    <label class="form-check-label" for="all-categories">
                                        <strong>All Categories</strong> (@totalProducts)
                                    </label>
                                </div>
                                
                                @if (categories != null)
                                {
                                    @foreach (var parentCategory in categories.Where(c => c.ParentCategoryId == null).OrderBy(c => c.CategoryName))
                                    {
                                        <div class="category-group">
                                            <!-- Parent Category -->
                                            <div class="form-check parent-category">
                                                <input class="form-check-input" type="radio" name="category" 
                                                       id="category-@parentCategory.CategoryId"
                                                       checked="@(selectedCategoryId == parentCategory.CategoryId)"
                                                       @onchange="() => FilterByCategory(parentCategory.CategoryId, parentCategory.CategoryName)">
                                                <label class="form-check-label fw-bold" for="category-@parentCategory.CategoryId">
                                                    <i class="fa fa-folder me-1"></i>
                                                    @parentCategory.CategoryName
                                                    @if (selectedCategoryId == parentCategory.CategoryId)
                                                    {
                                                        <span class="badge bg-primary ms-2">Active</span>
                                                    }
                                                </label>
                                            </div>
                                            
                                            <!-- Child Categories -->
                                            @{
                                                var childCategories = categories.Where(c => c.ParentCategoryId == parentCategory.CategoryId).OrderBy(c => c.CategoryName);
                                            }
                                            @if (childCategories.Any())
                                            {
                                                <div class="child-categories ms-3">
                                                    @foreach (var childCategory in childCategories)
                                                    {
                                                        <div class="form-check child-category">
                                                            <input class="form-check-input" type="radio" name="category" 
                                                                   id="category-@childCategory.CategoryId"
                                                                   checked="@(selectedCategoryId == childCategory.CategoryId)"
                                                                   @onchange="() => FilterByCategory(childCategory.CategoryId, childCategory.CategoryName)">
                                                            <label class="form-check-label" for="category-@childCategory.CategoryId">
                                                                <i class="fa fa-file-alt me-1 text-muted"></i>
                                                                @childCategory.CategoryName
                                                                @if (selectedCategoryId == childCategory.CategoryId)
                                                                {
                                                                    <span class="badge bg-secondary ms-2">Active</span>
                                                                }
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                        <!-- Page Size Selector -->
                        <div class="filter-section">
                            <h4>Items per page</h4>
                            <select class="form-select" @bind="pageSize" @bind:after="OnPageSizeChanged">
                                <option value="6">6 per page</option>
                                <option value="12">12 per page</option>
                                <option value="24">24 per page</option>
                                <option value="48">48 per page</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Grid -->
            <div class="col-lg-9">
                <!-- Loading Indicator -->
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading products...</p>
                    </div>
                }
                else
                {
                    <!-- Products Header -->
                    <!-- Products Header -->
<div class="products-header">
    <div class="results-count">
        <p class="mb-0">
            @if (!string.IsNullOrEmpty(selectedCategoryName))
            {
                <text>Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalProducts) 
                of @totalProducts products in <strong>@selectedCategoryName</strong> (Page @currentPage of @totalPages)</text>
            }
            else
            {
                <text>Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalProducts) 
                of @totalProducts products (Page @currentPage of @totalPages)</text>
            }
            @if (lastUpdateTime.HasValue)
            {
                <small class="text-muted">(Last updated: @lastUpdateTime.Value.ToString("HH:mm:ss"))</small>
            }
        </p>
    </div>
    <!-- ...existing sorting options... -->
</div>

                    <!-- Products Grid/List -->
                    @if (currentPageProducts.Any())
                    {
                        <div class="row product-grid @(viewMode == "list" ? "list-view" : "")">
                            @foreach (var product in currentPageProducts)
                            {
                                <div class="@(viewMode == "grid" ? "col-xl-4 col-md-6 mb-4" : "col-12 mb-3")">
                                    <div class="product-card @(GetProductHighlight(product.ProductId)) @(viewMode == "list" ? "list-item" : "")" 
                                         @onclick="() => ViewProduct(product.ProductId)">
                                        
                                        @if (viewMode == "grid")
                                        {
                                            <!-- Grid View -->
                                            @if (product.DiscountPrice.HasValue && product.DiscountPrice > 0)
                                            {
                                                <div class="product-badge-sale">Sale -@(Math.Round((product.Price - product.DiscountPrice.Value) / product.Price * 100))%</div>
                                            }
                                            else if (IsNewProduct(product))
                                            {
                                                <div class="product-badge-new bg-success">New</div>
                                            }
                                            
                                            <!-- Updated Wishlist Button -->
<!-- Font Awesome 6 syntax -->
<div class="product-wishlist" @onclick:stopPropagation="true">
    <button class="wishlist-btn @(IsInWishlist(product) ? "active" : "")" 
            @onclick="() => ToggleWishlist(product)"
            title="@(IsInWishlist(product) ? "Remove from Wishlist" : "Add to Wishlist")">
        <i class="@(IsInWishlist(product) ? "fas fa-heart" : "far fa-heart")"></i>
    </button>
</div>
                                            
                                            <div class="product-img">
                                                <img src="@GetProductImageUrl(product)" alt="@product.ProductName" 
                                                class="img-fluid"
                                                            style="width: 100%; height: 200px; object-fit: cover;"
                                                     onerror="this.src='https://via.placeholder.com/300x300/f8f9fa/6c757d?text=Product+Image'">
                                            </div>
                                            
                                            <div class="product-details">
                                                <div class="product-category">@GetCategoryName(product.CategoryId)</div>
                                                <h5 class="product-title">@product.ProductName</h5>
            
                                                <div class="product-price">
                                                    @if (product.DiscountPrice.HasValue && product.DiscountPrice > 0)
                                                    {
                                                        <span class="old-price">$@product.Price.ToString("F2")</span>
                                                        <span class="current-price">$@product.DiscountPrice.Value.ToString("F2")</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="current-price">$@product.Price.ToString("F2")</span>
                                                    }
                                                </div>
                                                <div class="product-stock mb-2">
                                                    @if (product.Quantity > 0)
                                                    {
                                                        <span class="badge bg-success">In Stock (@product.Quantity)</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Out of Stock</span>
                                                    }
                                                </div>
                                                <button class="btn btn-primary btn-add-to-cart" 
                                                        disabled="@(product.Quantity == 0)"
                                                        @onclick:stopPropagation="true"
                                                        @onclick="() => AddToCart(product)">
                                                    <i class="fas fa-shopping-cart me-1"></i>
                                                    @if (product.Quantity > 0)
                                                    {
                                                        @if (CartVM.IsInCart(product.ProductId))
                                                        {
                                                            <text>In Cart (@CartVM.GetCartItem(product.ProductId)?.CartQuantity)</text>
                                                        }
                                                        else
                                                        {
                                                            <text>Add to Cart</text>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>Out of Stock</text>
                                                    }
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <!-- List View -->
                                            <div class="row">
                                                <div class="col-md-3">
                                                    <div class="product-img position-relative">
                                                        <!-- Wishlist button for list view -->
                                                        <div class="product-wishlist-list" @onclick:stopPropagation="true">
                                                            <button class="wishlist-btn @(IsInWishlist(product) ? "active" : "")" 
                                                                    @onclick="() => ToggleWishlist(product)"
                                                                    title="@(IsInWishlist(product) ? "Remove from Wishlist" : "Add to Wishlist")">
                                                                <i class="fa @(IsInWishlist(product) ? "fa-heart" : "fa-heart-o")"></i>
                                                            </button>
                                                        </div>
                                                        <img src="@GetProductImageUrl(product)" alt="@product.ProductName" 
                                                            class="img-fluid"
                                                            style="width: 100%; height: 200px; object-fit: cover;"
                                                            onerror="this.src='https://via.placeholder.com/300x200/f8f9fa/6c757d?text=Product+Image'">
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="product-details">
                                                        <div class="product-category">@GetCategoryName(product.CategoryId)</div>
                                                        <h5 class="product-title">@product.ProductName</h5>
                                                        <p class="product-description">@(product.Description ?? "No description available")</p>
                                                    </div>
                                                </div>
                                                <div class="col-md-3">
                                                    <div class="product-price">
                                                        @if (product.DiscountPrice.HasValue && product.DiscountPrice > 0)
                                                        {
                                                            <span class="old-price">$@product.Price.ToString("F2")</span>
                                                            <span class="current-price">$@product.DiscountPrice.Value.ToString("F2")</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="current-price">$@product.Price.ToString("F2")</span>
                                                        }
                                                    </div>
                                                    <div class="product-stock">
                                                        @if (product.Quantity > 0)
                                                        {
                                                            <span class="badge bg-success">In Stock (@product.Quantity)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger">Out of Stock</span>
                                                        }
                                                    </div>
                                                    <button class="btn btn-primary btn-add-to-cart" 
                                                            disabled="@(product.Quantity == 0)"
                                                            @onclick:stopPropagation="true"
                                                            @onclick="() => AddToCart(product)">
                                                        <i class="fas fa-shopping-cart me-1"></i>
                                                        @if (product.Quantity > 0)
                                                        {
                                                            @if (CartVM.IsInCart(product.ProductId))
                                                            {
                                                                <text>In Cart (@CartVM.GetCartItem(product.ProductId)?.CartQuantity)</text>
                                                            }
                                                            else
                                                            {
                                                                <text>Add to Cart</text>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <text>Out of Stock</text>
                                                        }
                                                    </button>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Pagination -->
                        @if (totalPages > 1)
                        {
                            <div class="pagination-container">
                                <nav aria-label="Page navigation">
                                    <ul class="pagination justify-content-center">
                                        <!-- First page button -->
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(1)" 
                                                    disabled="@(currentPage == 1)" aria-label="First">
                                                <span aria-hidden="true">&laquo;&laquo;</span>
                                            </button>
                                        </li>
                                        
                                        <!-- Previous button -->
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" 
                                                    disabled="@(currentPage == 1)" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </button>
                                        </li>
                                        
                                        <!-- Page numbers -->
                                        @{
                                            var startPage = Math.Max(1, currentPage - 2);
                                            var endPage = Math.Min(totalPages, currentPage + 2);
                                            
                                            // Show first page if we're not showing it
                                            if (startPage > 1)
                                            {
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                                                </li>
                                                if (startPage > 2)
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                }
                                            }
                                        }
                                        
                                        @for (int pageNum = startPage; pageNum <= endPage; pageNum++)
                                        {
                                            var currentPageNum = pageNum; // Local copy to avoid closure issue
                                            <li class="page-item @(currentPageNum == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="@(async () => await GoToPage(currentPageNum))">
                                                    @currentPageNum
                                                </button>
                                            </li>
                                        }
                                        
                                        @{
                                            // Show last page if we're not showing it
                                            if (endPage < totalPages)
                                            {
                                                if (endPage < totalPages - 1)
                                                {
                                                    <li class="page-item disabled">
                                                        <span class="page-link">...</span>
                                                    </li>
                                                }
                                                <li class="page-item">
                                                    <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                                                </li>
                                            }
                                        }
                                        
                                        <!-- Next button -->
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" 
                                                    disabled="@(currentPage == totalPages)" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </button>
                                        </li>
                                        
                                        <!-- Last page button -->
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(totalPages)" 
                                                    disabled="@(currentPage == totalPages)" aria-label="Last">
                                                <span aria-hidden="true">&raquo;&raquo;</span>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                                
                                <!-- Page info -->
                                <div class="text-center mt-2">
                                    <small class="text-muted">
                                        Page @currentPage of @totalPages | Total: @totalProducts products
                                    </small>
                                </div>
                                
                                <!-- Quick jump to page (optional) -->
                                <div class="text-center mt-2">
                                    <div class="d-inline-flex align-items-center">
                                        <small class="me-2">Go to page:</small>
                                        <input type="number" class="form-control form-control-sm d-inline-block" 
                                               style="width: 80px;" min="1" max="@totalPages" 
                                               @bind="jumpToPage" @onkeyup="OnJumpToPageKeyUp" />
                                        <button class="btn btn-sm btn-outline-primary ms-2" @onclick="JumpToPage">Go</button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <!-- No Products Found -->
                        <div class="text-center py-5">
                            <i class="fa fa-search fa-3x text-muted mb-3"></i>
                            <h4>No products found</h4>
                            <p class="text-muted">No products available on this page.</p>
                            @if (currentPage > 1)
                            {
                                <button class="btn btn-primary me-2" @onclick="() => GoToPage(1)">Go to First Page</button>
                            }
                            <button class="btn btn-outline-primary" @onclick="ResetFilters">Reset Filters</button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? CategorySlug { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Search { get; set; }
    // State properties
    private bool isLoading = true;
    private string viewMode = "grid";
    private string searchTerm = "";
    private int? selectedCategoryId = null;
    private string? selectedCategoryName = null;

    // Pagination - Updated to use server-side pagination
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 0;
    private int totalProducts = 0;
 private int jumpToPage = 1; // For quick jump functionality
    // Data collections - Now only holds current page data
    private List<PrdVMWithImages> currentPageProducts = new();
    private List<CategoryVM> categories = new();

    // SignalR properties
    private Dictionary<int, string> productHighlights = new();
    private int recentUpdates = 0;
    private int lowStockCount = 0;
    private DateTime? lastUpdateTime;
    private Timer? cleanupTimer;
        private bool hasInitialized = false;
    private string? lastCategorySlug = null; // ✅ Track last parameters
    private string? lastSearch = null;
protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            
            // ✅ Initialize tracking variables
            lastCategorySlug = CategorySlug;
            lastSearch = Search;
            
            await SignalRService.StartConnectionAsync();
            RegisterSignalREvents();
            await LoadCategories();
            await HandleParametersFromUrl();
            await LoadProductsPage();
            
            hasInitialized = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading page: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

protected override async Task OnParametersSetAsync()
    {
        if (!hasInitialized) return;
        
        // ✅ CHỈ process nếu parameters thực sự thay đổi
        bool parametersChanged = false;
        
        if (CategorySlug != lastCategorySlug)
        {
            Console.WriteLine($"🔄 CategorySlug changed: '{lastCategorySlug}' → '{CategorySlug}'");
            lastCategorySlug = CategorySlug;
            parametersChanged = true;
        }
        
        if (Search != lastSearch)
        {
            Console.WriteLine($"🔄 Search changed: '{lastSearch}' → '{Search}'");
            lastSearch = Search;
            parametersChanged = true;
        }
        
        if (!parametersChanged)
        {
            Console.WriteLine("🚫 OnParametersSetAsync skipped - no parameter changes");
            return;
        }
        
        Console.WriteLine("✅ OnParametersSetAsync processing - parameters changed");
        await HandleParametersFromUrl();
        await LoadProductsPage();
    }

    private async Task HandleCategoryFromUrl()
    {
        if (!string.IsNullOrEmpty(CategorySlug))
        {
            // Find category by slug (name)
            var category = categories.FirstOrDefault(c => 
                c.CategoryName.Replace(" ", "-").ToLower() == CategorySlug.ToLower() ||
                c.CategoryName.ToLower() == CategorySlug.ToLower().Replace("-", " "));
            
            if (category != null)
            {
                selectedCategoryId = category.CategoryId;
                selectedCategoryName = category.CategoryName;
            }
            else
            {
                // Category not found, redirect to all products
                selectedCategoryId = null;
                selectedCategoryName = null;
                Navigation.NavigateTo("/products",false);
            }
        }
        else
        {
            selectedCategoryId = null;
            selectedCategoryName = null;
        }
    }
    private async Task HandleParametersFromUrl()
{
    // Handle search parameter first (higher priority than category)
    if (!string.IsNullOrEmpty(Search))
    {
        searchTerm = Search;
        selectedCategoryId = null;
        selectedCategoryName = null;
        currentPage = 1;
        jumpToPage = 1;
    }
    // Handle category parameter
    else if (!string.IsNullOrEmpty(CategorySlug))
    {
        await HandleCategoryFromUrl();
        searchTerm = "";
    }
    else
    {
        // Reset all filters if no parameters
        searchTerm = "";
        selectedCategoryId = null;
        selectedCategoryName = null;
    }
}
    private void RegisterSignalREvents()
    {
        SignalRService.ProductCreated += OnProductCreated;
        SignalRService.ProductUpdated += OnProductUpdated;
        SignalRService.ProductDeleted += OnProductDeleted;
        SignalRService.ProductStockChanged += OnProductStockChanged;
        SignalRService.ProductPriceChanged += OnProductPriceChanged;
        SignalRService.LowStockAlert += OnLowStockAlert;
                SignalRService.CategoryCreated += OnCategoryCreated;
        SignalRService.CategoryUpdated += OnCategoryUpdated;
        SignalRService.CategoryDeleted += OnCategoryDeleted;

    }

    private async Task LoadCategories()
    {
        try
        {
            var result = await CategoryService.GetAllCategoriesAsync();
            categories = result?.ToList() ?? new List<CategoryVM>();
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to load categories");
        }
    }

    // Updated to use paginated API
    private async Task LoadProductsPage()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // If we have filters, use the old method for now
            if (!string.IsNullOrWhiteSpace(searchTerm) || selectedCategoryId.HasValue)
            {
                await LoadFilteredProducts();
                return;
            }

            // Use paginated API for normal browsing
            var result = await ProdService.GetAllProductByPageAsync(currentPage, pageSize);
            if (result?.Success == true && result.Data != null)
            {
                currentPageProducts = result.Data.ToList();
                
                // Get total count from all products for pagination calculation
                // This is a temporary solution - ideally the API should return total count
                var allProductsResult = await ProdService.GetAllProductsAsync();
                if (allProductsResult != null)
                {
                    totalProducts = allProductsResult.Count();
                    totalPages = (int)Math.Ceiling((double)totalProducts / pageSize);
                }
                
                CalculateStats();
            }
            else
            {
                currentPageProducts = new List<PrdVMWithImages>();
                totalProducts = 0;
                totalPages = 0;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError ("Failed to load products");
            currentPageProducts = new List<PrdVMWithImages>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    // Quick jump functionality
    private async Task JumpToPage()
    {
        if (jumpToPage >= 1 && jumpToPage <= totalPages && jumpToPage != currentPage)
        {
            await GoToPage(jumpToPage);
        }
        else if (jumpToPage < 1)
        {
            jumpToPage = 1;
        }
        else if (jumpToPage > totalPages)
        {
            jumpToPage = totalPages;
        }
    }
    // Fallback for filtered results
    private async Task LoadFilteredProducts()
    {
        try
        {
            IEnumerable<PrdVMWithImages> products;

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                products = await ProdService.SearchProductsAsync(searchTerm);
            }
            else if (selectedCategoryId.HasValue)
            {
                products = await ProdService.GetProductsByCategoryAsync(selectedCategoryId.Value);
            }
            else
            {
                products = await ProdService.GetAllProductsAsync();
            }

            var productList = products?.ToList() ?? new List<PrdVMWithImages>();
            totalProducts = productList.Count;
            totalPages = (int)Math.Ceiling((double)totalProducts / pageSize);

            // Apply client-side pagination for filtered results
            var skip = (currentPage - 1) * pageSize;
            currentPageProducts = productList.Skip(skip).Take(pageSize).ToList();

            CalculateStats();
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to load filtered products");
            currentPageProducts = new List<PrdVMWithImages>();
        }
    }

    private void CalculateStats()
    {
        lowStockCount = currentPageProducts.Count(p => p.Quantity <= 10);
    }

    private string GetCategoryName(int categoryId)
    {
        return categories.FirstOrDefault(c => c.CategoryId == categoryId)?.CategoryName ?? "Unknown";
    }

    // Updated to use placeholder image service
    private string GetProductImageUrl(PrdVMWithImages product)
    {
        // Use a placeholder service for consistent default images
        return product.PrimaryImageUrl ?? 
               $"https://via.placeholder.com/300x300/f8f9fa/6c757d?text=Product+Image+{product.ProductId}";
    }

    private bool IsNewProduct(PrdVMWithImages product)
    {
        return product.CreatedAt.HasValue && 
               product.CreatedAt.Value > DateTime.Now.AddDays(-30);
    }

    // Event handlers
    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private async Task SearchProducts()
    {
        currentPage = 1;
        await LoadProductsPage();
    }

    private async Task FilterByCategory(int? categoryId, string? categoryName = null)
{
    try
    {
        Console.WriteLine($"🎯 FilterByCategory called - ID: {categoryId}, Name: '{categoryName}'");
        
        selectedCategoryId = categoryId;
        selectedCategoryName = categoryName;
        currentPage = 1;
        jumpToPage = 1;

        // Clear search when filtering by category
        searchTerm = "";
        
        // ✅ SỬA: Load data trực tiếp, không cần navigate
        await LoadProductsPage();
        
        // ✅ Update URL AFTER loading (optional)
        if (categoryId.HasValue && !string.IsNullOrEmpty(categoryName))
        {
            var slug = categoryName.Replace(" ", "-").ToLower();
            lastCategorySlug = slug;
            Navigation.NavigateTo($"/products/{slug}", replace: true);
        }
        else
        {
            lastCategorySlug = null;
            Navigation.NavigateTo("/products", replace: true);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"❌ Error in FilterByCategory: {ex.Message}");
        ToastService.ShowError("Failed to filter by category");
    }
}
    private string CreateSlug(string categoryName)
    {
        if (string.IsNullOrEmpty(categoryName))
            return "";
            
        return categoryName
            .ToLower()
            .Replace(" ", "-")
            .Replace("&", "and")
            .Replace("/", "-")
            .Replace("\\", "-")
            .Replace("(", "")
            .Replace(")", "")
            .Trim('-');
    }

    // Helper method to get category name from slug
    private string GetCategoryNameFromSlug(string slug)
    {
        if (string.IsNullOrEmpty(slug))
            return "";
            
        return slug
            .Replace("-", " ")
            .Replace("and", "&");
    }

    // Update breadcrumb to show category
    private string GetBreadcrumb()
    {
        if (!string.IsNullOrEmpty(selectedCategoryName))
        {
            return $"Home / Products / {selectedCategoryName}";
        }
        return "Home / Products";
    }
    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadProductsPage();
    }

    private async Task ResetFilters()
    {
        searchTerm = "";
        selectedCategoryId = null;
        currentPage = 1;
        jumpToPage = 1;
        await LoadProductsPage();
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            jumpToPage = page;
            await LoadProductsPage();
        }
    }

    private async Task OnPageSizeChanged()
    {
        currentPage = 1;
        jumpToPage = 1;
        await LoadProductsPage();
    }

    private void ViewProduct(int productId)
    {
        Navigation.NavigateTo($"/product/{productId}", true);
    }

    private async Task AddToCart(PrdVMWithImages product)
    {
        try
        {
            if (product.Quantity > 0)
            {
                // Thêm sản phẩm vào cart sử dụng CartVM
                CartVM.AddToCart(product, 1);
                
                ToastService.ShowSuccess($"Added '{product.ProductName}' to cart!");
                StateHasChanged(); // Refresh UI để cập nhật button text
            }
            else
            {
                ToastService.ShowWarning($"'{product.ProductName}' is out of stock");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error adding item to cart: {ex.Message}");
        }
    }

    // Wishlist functionality
private bool IsInWishlist(PrdVMWithImages product)
{
    return WishlistVM.IsInWishlist(product.ProductId);
}

private async Task ToggleWishlist(PrdVMWithImages product)
{
    try
    {
        if (IsInWishlist(product))
        {
            // Remove from wishlist
            WishlistVM.RemoveFromWishlist(product.ProductId);
            ToastService.ShowInfo($"Removed {product.ProductName} from wishlist");
        }
        else
        {
            // Add to wishlist
            var wishlistItem = new WishlistVM
            {
                ProductId = product.ProductId,
                ProductName = product.ProductName,
                Description = product.Description,
                Price = product.Price,
                DiscountPrice = product.DiscountPrice,
                Quantity = product.Quantity,
                AddedAt = DateTime.Now,
                PrimaryImageUrl = product.PrimaryImageUrl,
            };
            
            WishlistVM.AddToWishlist(wishlistItem);
            ToastService.ShowSuccess($"Added {product.ProductName} to wishlist");
        }
        
        StateHasChanged();
    }
    catch (Exception ex)
    {
        ToastService.ShowError($"Error updating wishlist: {ex.Message}");
    }
}
    // SignalR event handlers
    private async void OnProductCreated(int productId, string productName, string categoryName)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowSuccess($"🆕 New Product: {productName} added to {categoryName}");
            
            productHighlights[productId] = "product-highlight";
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Refresh current page to include new products
            await LoadProductsPage();
            StateHasChanged();
            
            _ = Task.Delay(5000).ContinueWith(_ => RemoveProductHighlight(productId));
        });
    }

    private async void OnProductUpdated(int productId, string productName, decimal price)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowInfo($"📝 Product Updated: {productName} - New price: ${price:F2}");
            
            productHighlights[productId] = "product-highlight";
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Update the specific product if it exists on current page
            var product = currentPageProducts.FirstOrDefault(p => p.ProductId == productId);
            if (product != null)
            {
                product.Price = price;
                product.UpdatedAt = DateTime.Now;
            }
            
            StateHasChanged();
            _ = Task.Delay(5000).ContinueWith(_ => RemoveProductHighlight(productId));
        });
    }

    private async void OnProductDeleted(int productId, string productName)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowWarning($"🗑️ Product Removed: {productName} has been removed from catalog");
            
            // Remove the product from current page if it exists
            currentPageProducts.RemoveAll(p => p.ProductId == productId);
            
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Refresh the page to maintain proper pagination
            await LoadProductsPage();
            StateHasChanged();
        });
    }

    private async void OnProductStockChanged(int productId, string productName, int newStock)
    {
        await InvokeAsync(() =>
        {
            ToastService.ShowInfo($"📦 Stock Updated: {productName} - {newStock} units available");
            
            productHighlights[productId] = "product-highlight";
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Update the specific product stock
            var product = currentPageProducts.FirstOrDefault(p => p.ProductId == productId);
            if (product != null)
            {
                product.Quantity = newStock;
            }
            
            CalculateStats();
            StateHasChanged();
            _ = Task.Delay(5000).ContinueWith(_ => RemoveProductHighlight(productId));
        });
    }

    private async void OnProductPriceChanged(int productId, string productName, decimal oldPrice, decimal newPrice)
    {
        await InvokeAsync(() =>
        {
            ToastService.ShowWarning($"💰 Price Changed: {productName} from ${oldPrice:F2} to ${newPrice:F2}");
            
            productHighlights[productId] = "product-price-updated";
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Update the specific product price
            var product = currentPageProducts.FirstOrDefault(p => p.ProductId == productId);
            if (product != null)
            {
                product.Price = newPrice;
            }
            
            StateHasChanged();
            _ = Task.Delay(5000).ContinueWith(_ => RemoveProductHighlight(productId));
        });
    }

    private async void OnLowStockAlert(int productId, string productName, int currentStock, int minStock)
    {
        await InvokeAsync(() =>
        {
            ToastService.ShowError($"⚠️ Low Stock Alert: {productName} - Only {currentStock} units left!");
            
            productHighlights[productId] = "product-low-stock";
            lastUpdateTime = DateTime.Now;
            CalculateStats();
            
            StateHasChanged();
            _ = Task.Delay(10000).ContinueWith(_ => RemoveProductHighlight(productId));
        });
    }

    private async void OnCategoryCreated(string categoryName)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowSuccess($"🗂️ New Category: {categoryName} has been added");
            
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Refresh categories để có category mới
            await LoadCategories();
            
            // Refresh products để cập nhật category count
            await LoadProductsPage();
            
            StateHasChanged();
        });
    }

    private async void OnCategoryUpdated(int categoryId, string categoryName)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowInfo($"📝 Category Updated: {categoryName}");
            
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Refresh categories để có thông tin category mới
            await LoadCategories();
            
            // Nếu đang filter theo category này, highlight các products
            if (selectedCategoryId == categoryId)
            {
                foreach (var product in currentPageProducts.Where(p => p.CategoryId == categoryId))
                {
                    productHighlights[product.ProductId] = "product-category-updated";
                    _ = Task.Delay(5000).ContinueWith(_ => RemoveProductHighlight(product.ProductId));
                }
                
                ToastService.ShowInfo($"Products in '{categoryName}' category have been highlighted");
            }
            
            StateHasChanged();
        });
    }

    private async void OnCategoryDeleted(int categoryId, string categoryName)
    {
        await InvokeAsync(async () =>
        {
            ToastService.ShowWarning($"🗑️ Category Removed: {categoryName} has been deleted");
            
            recentUpdates++;
            lastUpdateTime = DateTime.Now;
            
            // Nếu đang filter theo category bị xóa, reset về all categories
            if (selectedCategoryId == categoryId)
            {
                selectedCategoryId = null;
                currentPage = 1;
                jumpToPage = 1;
                ToastService.ShowInfo("Filter reset to 'All Categories' because selected category was deleted");
            }
            
            // Refresh categories để xóa category khỏi list
            await LoadCategories();
            
            // Refresh products để cập nhật category count và hiển thị
            await LoadProductsPage();
            
            StateHasChanged();
        });
    }

    private string GetProductHighlight(int productId)
    {
        return productHighlights.TryGetValue(productId, out var highlight) ? highlight : "";
    }

    private async Task RemoveProductHighlight(int productId)
    {
        await InvokeAsync(() =>
        {
            productHighlights.Remove(productId);
            StateHasChanged();
        });
    }

    private void CleanupOldHighlights(object? state)
    {
        if (productHighlights.Any())
        {
            productHighlights.Clear();
            InvokeAsync(StateHasChanged);
        }
    }
        private async Task OnJumpToPageKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await JumpToPage();
        }
    }

    // Handle page size change event
    private async Task OnPageSizeChangedEvent(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            jumpToPage = 1;
            await LoadProductsPage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from SignalR events
        SignalRService.ProductCreated -= OnProductCreated;
        SignalRService.ProductUpdated -= OnProductUpdated;
        SignalRService.ProductDeleted -= OnProductDeleted;
        SignalRService.ProductStockChanged -= OnProductStockChanged;
        SignalRService.ProductPriceChanged -= OnProductPriceChanged;
        SignalRService.LowStockAlert -= OnLowStockAlert;
                SignalRService.CategoryCreated -= OnCategoryCreated;
        SignalRService.CategoryUpdated -= OnCategoryUpdated;
        SignalRService.CategoryDeleted -= OnCategoryDeleted;
        cleanupTimer?.Dispose();

        if (SignalRService != null)
        {
            await SignalRService.DisposeAsync();
        }
    }
}

