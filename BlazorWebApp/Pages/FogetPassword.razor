@page "/forget-password"
@using System.ComponentModel.DataAnnotations
@using BlazorWebApp.Services
@using web_api_base.Models.ViewModel
@inject IEmailService EmailService
@inject LoginService LoginService
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

<PageTitle>Forgot Password - Grocery Shop</PageTitle>

<link href="css/auth.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

@code {
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email format")]
    private ForgotPasswordVM Email { get; set; } = new ForgotPasswordVM();

    private bool isSubmitting = false;
    private string message = "";
    private string messageType = "";

    private async Task HandlePasswordReset()
    {
        isSubmitting = true;
        message = "";

        try
        {
            // Validate email format first
            if (string.IsNullOrWhiteSpace(Email.Email) || !Email.Email.Contains("@"))
            {
                message = "Please enter a valid email address.";
                messageType = "error";
                isSubmitting = false;
                StateHasChanged();
                return;
            }
            //Gọi api kiểm tra email có tồn tại trong hệ thống hay không
            var (resetToken, emailExists) = await LoginService.ForgotPassword(Email);
            if (!emailExists)
            {
                message = "Email does not exist in our records.";
                messageType = "error";
                isSubmitting = false;
                StateHasChanged();
                return;
            }

            // Generate reset token and send email
            await EmailService.SendPasswordResetEmailAsync(Email.Email, resetToken);

            message = "If an account with this email exists, you will receive a password reset link shortly.";
            messageType = "success";
            Email.Email = "";
        }
        catch (Exception ex)
        {
            message = "An error occurred. Please try again later.";
            messageType = "error";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}

<div class="auth-container">
    <div class="auth-box forgot-box">
        <div class="auth-header">
            <div class="forgot-icon">
                <i class="fas fa-unlock-alt"></i>
            </div>
            <h2>Forgot Your Password?</h2>
            <p>Enter your email address and we'll send you a link to reset your password</p>
        </div>
        
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @(messageType == "success" ? "alert-success" : "alert-error")">
                @message
            </div>
        }
        
        <div class="auth-form">
            <EditForm Model="this" OnValidSubmit="HandlePasswordReset">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="email">Email Address</label>
                    <div class="input-group">
                        <i class="fas fa-envelope"></i>
                        <InputText type="email" id="email" placeholder="Enter your registered email" 
                                   @bind-Value="Email.Email" required disabled="@isSubmitting" />
                    </div>
                    <ValidationMessage For="() => Email.Email" />
                </div>
                
                <div class="form-submit">
                    <button type="submit" class="btn-submit" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>Sending...</span>
                        }
                        else
                        {
                            <span>Reset Password</span>
                        }
                    </button>
                </div>
            </EditForm>
            
            <div class="auth-footer">
                <p>Remember your password? <a href="/login">Back to Login</a></p>
            </div>
        </div>
    </div>
</div>

<style>
.alert {
    padding: 12px 16px;
    margin: 16px 0;
    border-radius: 6px;
    font-size: 14px;
}

.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

.alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.btn-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.fa-spinner {
    margin-right: 8px;
}

.forgot-box {
    max-width: 500px;
}

.forgot-icon {
    font-size: 48px;
    color: #5caf90;
    margin-bottom: 20px;
    text-align: center;
}

.auth-steps {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 30px;
    padding: 20px;
}

.step-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    opacity: 0.5;
}

.step-item.active {
    opacity: 1;
    color: #5caf90;
}

.step-number {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 8px;
}

.step-item.active .step-number {
    background-color: #5caf90;
    color: white;
}

.step-text {
    font-size: 12px;
    text-align: center;
}

.step-line {
    width: 50px;
    height: 2px;
    background-color: #ddd;
    margin: 0 10px;
}
</style>
