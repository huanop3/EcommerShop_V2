using System.Security.Claims;
using System.Text;
using Blazored.LocalStorage;
using BlazorWebApp.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Components.Server;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.IdentityModel.Tokens;
using MudBlazor;
using MudBlazor.Services;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();
//Add service httpclient ƒë·ªÉ g·ªçi api
builder.Services.AddHttpClient();
//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Secret-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];
// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{
    // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
        ValidateIssuer = true,
        ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
                              // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
        ValidateAudience = true,
        ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
                                  // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)),
        // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
        // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
        ClockSkew = TimeSpan.Zero,
        // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
        RoleClaimType = ClaimTypes.Role,
        // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
        NameClaimType = ClaimTypes.Name,
        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
        ValidateLifetime = true
    };
});
//DI Service JWT
builder.Services.AddScoped<JwtAuthService>();
// Th√™m d·ªãch v·ª• CustomAuthStateProvider ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i x√°c th·ª±c
builder.Services.AddScoped<AuthenticationStateProvider, CustomAuthStateProvider>();

// Th√™m d·ªãch v·ª• Authorization ƒë·ªÉ h·ªó tr·ª£ ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
builder.Services.AddAuthorization();

builder.Services.AddBlazoredLocalStorage();

// ƒê·ªçc URL c·ªßa Gateway t·ª´ c·∫•u h√¨nh
var gatewayBaseUrl = builder.Configuration["GatewayBaseUrl"];

// üî• S·ª¨A: Ki·ªÉm tra m√¥i tr∆∞·ªùng ƒë·ªÉ d√πng ƒë·ªãa ch·ªâ ph√π h·ª£p
if (builder.Environment.IsDevelopment() && Environment.GetEnvironmentVariable("DOTNET_RUNNING_IN_CONTAINER") == "true")
{
    // ƒêang ch·∫°y trong Docker container
    gatewayBaseUrl = "http://gateway_service:8080";
}
else if (string.IsNullOrEmpty(gatewayBaseUrl))
{
    // Ch·∫°y local development
    gatewayBaseUrl = "http://localhost:5282";
}

builder.Services.AddScoped(sp => 
{
    var httpClient = new HttpClient { BaseAddress = new Uri(gatewayBaseUrl) };
    return httpClient;
});

// Add services to the container.
builder.Services.AddScoped<LoginService>();
builder.Services.AddScoped<UserService>();
builder.Services.AddScoped<SignalRService>();
builder.Services.AddScoped<CategoryService>();
builder.Services.AddScoped<CouponService>();
builder.Services.AddScoped<AddressService>();
builder.Services.AddScoped<SellerProfileService>();
builder.Services.AddScoped<ProdService>();
builder.Services.AddScoped<OrderService>();
builder.Services.AddScoped<DashboardService>();
builder.Services.AddScoped<ShipperProfileService>();
builder.Services.AddScoped<ShipmentService>();
builder.Services.AddScoped<ProductImageService>();
// Register MudBlazor services
builder.Services.AddMudServices(config =>
{
    config.SnackbarConfiguration.PositionClass = Defaults.Classes.Position.BottomLeft;

    config.SnackbarConfiguration.PreventDuplicates = false;
    config.SnackbarConfiguration.NewestOnTop = false;
    config.SnackbarConfiguration.ShowCloseIcon = true;
    config.SnackbarConfiguration.VisibleStateDuration = 10000;
    config.SnackbarConfiguration.HideTransitionDuration = 500;
    config.SnackbarConfiguration.ShowTransitionDuration = 500;
    config.SnackbarConfiguration.SnackbarVariant = Variant.Filled;
});
// Th√™m v√†o Program.cs tr∆∞·ªõc d√≤ng var app = builder.Build()
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<ToastService>();
builder.Services.AddScoped<IEmailService, EmailService>();
// Authorization
builder.Services.AddAuthorizationCore();

var app = builder.Build();





// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();
app.MapBlazorHub();
app.MapFallbackToPage("/_Host");

app.Run();